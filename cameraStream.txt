//注册所有的网络协议
	avformat_network_init();

	int sampleRate = 44100;
	int channels = 2;
	int sampleByte = 2;
	AVSampleFormat inSampleFmt = AV_SAMPLE_FMT_S16;
	AVSampleFormat outSampleFmt = AV_SAMPLE_FMT_FLTP;

	//1 qt音频开始录制
	QAudioFormat fmt;
	fmt.setSampleRate(sampleRate);
	fmt.setChannelCount(channels);
	fmt.setSampleFormat(QAudioFormat::Float);
	

	QAudioDevice info = QMediaDevices::defaultAudioInput();
	if (!info.isFormatSupported(fmt))
	{
		cout << "Audio format not support!" << endl;
	}

	QAudioSource* input = new QAudioSource(fmt);
	//开始录制音频
	QIODevice* io = input->start();

	//1. 打开文件，解封装
	AVFormatContext* ic = NULL;
	int re = avformat_open_input(&ic, inUrl, 0, 0);
	if (re != 0)
	{
		char buf[1024] = { 0 };
		av_strerror(re, buf, sizeof(buf) - 1);
		cout << "avformat_open_input failed! Err:" << buf << endl;
		return -1;
	}

	//2. 查找音频流
	int audioStream = 0;
	re = av_find_best_stream(ic, AVMEDIA_TYPE_AUDIO, -1, -1, NULL, 0);
	if (re < 0)
	{
		cout << "av_find_best_stream failed!" << endl;
		return -1;
	}
	audioStream = re;

	//3. 打开音频解码器
	const AVCodec* decoder = avcodec_find_decoder(ic->streams[audioStream]->codecpar->codec_id);
	if (!decoder)
	{
		cout << "avcodec_find_decoder failed!" << endl;
		return -1;
	}
	AVCodecContext* dac = avcodec_alloc_context3(decoder);
	if (!dac)
	{
		cout << "avcodec_alloc_context3 decoder failed!" << endl;
		getchar();
		return -1;
	}

	cout << "avcodec_alloc_context3 decoder success!" << endl;



	/*
	qt录制出来的音频采样点格式是UnSignedInt，但是aac编码需要的格式是float类型，因此需要重采样
	*/
	///2 音频重采样 上下文初始化 
	SwrContext* asc = NULL;

	asc = swr_alloc_set_opts(asc,
		av_get_default_channel_layout(channels), outSampleFmt, sampleRate,//输出格式
		av_get_default_channel_layout(channels), inSampleFmt, sampleRate, 0, 0); //输入格式																	//输入格式
	if (!asc)
	{
		cout << "swr_alloc_set_opts failed!" << endl;
		getchar();
		return -1;
	}

	int ret = swr_init(asc);
	if (ret != 0)
	{
		char err[1024] = { 0 };
		av_strerror(ret, err, sizeof(err) - 1);
		cout << err << endl;

		getchar();
		return -1;
	}

	cout << "音频重采样上下文初始化成功" << endl;

	///3 音频重采样输出空间分配
	AVFrame* pcm = av_frame_alloc();
	pcm->format = outSampleFmt;
	pcm->channels = channels;
	pcm->channel_layout = av_get_default_channel_layout(channels);
	pcm->nb_samples = 1024; //一帧音频一通道的采样点数，内部然后可以通过这个值及通道数，及采样点的大小计算一秒的音频字节数及一帧音频的字节数
	ret = av_frame_get_buffer(pcm, 0);//给pcm分配存储空间，第二个参数传0表示不需要对齐
	if (ret != 0)
	{
		char err[1024] = { 0 };
		av_strerror(ret, err, sizeof(err) - 1);
		cout << err << endl;

		getchar();
		return -1;
	}

	///4 初始化音频编码器
	const AVCodec* codec = avcodec_find_encoder(AV_CODEC_ID_AAC);
	if (!codec)
	{
		cout << "avcodec_find__encoder AV_CODEC_ID_AAC!" << endl;
		getchar();
		return -1;
	}

	//音频编码器上下文
	AVCodecContext* ac = avcodec_alloc_context3(codec);
	if (!ac)
	{
		cout << "avcodec_alloc_context3 AV_CODEC_ID_AAC failed!" << endl;
		getchar();
		return -1;
	}

	cout << "avcodec_alloc_context3 success!" << endl;

	ac->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
	ac->thread_count = 8;
	ac->bit_rate = 40000;
	ac->sample_rate = sampleRate;
	ac->sample_fmt = AV_SAMPLE_FMT_FLTP;
	ac->channels = channels;
	ac->channel_layout = av_get_default_channel_layout(channels);

	//打开音频编码器
	ret = avcodec_open2(ac, 0, 0);
	if (ret != 0)
	{
		char err[1024] = { 0 };
		av_strerror(ret, err, sizeof(err) - 1);
		cout << err << endl;

		getchar();
		return -1;
	}
	cout << "avcodec_open2 success!" << endl;

	///5. 输出封装器和音频流配置
	//a 创建输出封装器上下文
	AVFormatContext* ic = NULL;
	ret = avformat_alloc_output_context2(&ic, 0, "flv", outUrl);
	if (ret != 0)
	{
		char buf[1024] = { 0 };
		av_strerror(ret, buf, sizeof(buf) - 1);
		cout << buf << endl;
		getchar();
		return -1;
	}
	//b添加音频流
	AVStream* as = avformat_new_stream(ic, NULL);
	if (!as)
	{
		char buf[1024] = { 0 };
		av_strerror(ret, buf, sizeof(buf) - 1);
		cout << buf << endl;
		getchar();
		return -1;
	}
	as->codecpar->codec_tag = 0;
	avcodec_parameters_from_context(as->codecpar, ac);
	av_dump_format(ic, 0, outUrl, 1);

	//打开rtmp的网络数据IO
	ret = avio_open(&ic->pb, outUrl, AVIO_FLAG_WRITE);
	if (ret != 0)
	{
		char buf[1024] = { 0 };
		av_strerror(ret, buf, sizeof(buf) - 1);
		cout << buf << endl;
		getchar();
		return -1;
	}

	//写入封装头
	ret = avformat_write_header(ic, NULL);
	if (ret != 0)
	{
		char buf[1024] = { 0 };
		av_strerror(ret, buf, sizeof(buf) - 1);
		cout << buf << endl;
		getchar();
		return -1;
	}

	//一次读取一帧音频的字节数
	int readSize = pcm->nb_samples * channels * sampleByte;
	char* buf = new char[readSize];
	int apts = 0;
	AVPacket pkt = { 0 };
	
	for (;;)
	{
		//一次读取一帧音频
		if (input->bytesAvailable() < readSize)
		{
			Sleep(1);
			continue;
		}

		int size = 0;
		while (size != readSize)
		{
			int len = io->read(buf + size, readSize - size);
			if (len < 0) break;
			size += len;
		}

		if (size != readSize) continue;

		//已经读一帧源数据
		//重采样源数据
		const uint8_t* indata[AV_NUM_DATA_POINTERS] = { 0 };
		indata[0] = (uint8_t*)buf;
		//返回重采样后每一个声道的采样点数
		int len = swr_convert(asc, pcm->data, pcm->nb_samples,//输出参数，输出存储地址和样本数量
			indata, pcm->nb_samples);

		//pts运算
		//nb_sample/sample_rate = 一帧音频的秒数sec
		//timebase pts = sec * timebase.den
		pcm->pts = apts;
		apts += av_rescale_q(pcm->nb_samples, { 1, sampleRate }, ac->time_base);

		int ret = avcodec_send_frame(ac, pcm);
		if (ret != 0) continue;

		av_packet_unref(&pkt);
		ret = avcodec_receive_packet(ac, &pkt);
		if (ret != 0) continue;

		cout << pkt.size << " " << flush;

		//推流
		pkt.pts = av_rescale_q(pkt.pts, ac->time_base, as->time_base);
		pkt.dts = av_rescale_q(pkt.dts, ac->time_base, as->time_base);
		pkt.duration = av_rescale_q(pkt.duration, ac->time_base, as->time_base);
		ret = av_interleaved_write_frame(ic, &pkt);
		if (ret == 0)
		{
			cout << "#" << flush;
		}
	}

	delete buf;
